name: Market Data Refresh (No Telegram Alerts)

on:
  schedule:
    # Run every 6 hours to refresh coin universe
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  market_data_refresh:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Create Required Directories
        run: |
          mkdir -p cache
          mkdir -p config
          mkdir -p src/data_refresh

      - name: Run Market Data Refresh
        env:
          # Only CoinGecko API key needed for market data refresh
          COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
        run: python src/data_refresh/market_data_refresh.py

      - name: Verify Cache and Display Stats
        run: |
          echo "=== MARKET DATA REFRESH RESULTS ==="
          
          if [ -f cache/high_risk_market_data.json ]; then
            echo "‚úÖ Market data cache exists"
            
            # Extract coin count and other stats
            COIN_COUNT=$(python -c "
            import json
            with open('cache/high_risk_market_data.json', 'r') as f:
                data = json.load(f)
                print(len(data.get('coins', [])))
            " 2>/dev/null || echo "0")
            
            UPDATED_AT=$(python -c "
            import json
            with open('cache/high_risk_market_data.json', 'r') as f:
                data = json.load(f)
                print(data.get('metadata', {}).get('updated_at', 'Unknown'))
            " 2>/dev/null || echo "Unknown")
            
            echo "üìä Filtered coins: $COIN_COUNT"
            echo "üïê Updated at: $UPDATED_AT"
            
            # Show top 10 coins for verification
            echo "üèÜ Top 10 coins by market cap:"
            python -c "
            import json
            with open('cache/high_risk_market_data.json', 'r') as f:
                data = json.load(f)
                coins = data.get('coins', [])[:10]
                for i, coin in enumerate(coins, 1):
                    print(f'{i:2}. {coin[\"symbol\"]:>6} - {coin[\"name\"][:25]:25} - \${coin[\"market_cap\"]/1e9:.1f}B')
            " 2>/dev/null || echo "Error reading coin data"
            
          else
            echo "‚ùå Market data cache missing"
          fi
          
          echo ""
          if [ -f config/blocked_coins.txt ]; then
            echo "‚úÖ Blocked coins file exists"
            BLOCKED_COUNT=$(grep -v '^#' config/blocked_coins.txt | grep -v '^$' | wc -l)
            echo "üö´ Blocked coins: $BLOCKED_COUNT"
          else
            echo "‚ùå Blocked coins file missing"
          fi

      - name: Commit Market Data Cache
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add cache files
          if [ -f cache/high_risk_market_data.json ]; then
            git add cache/high_risk_market_data.json
            echo "‚úÖ Added market data cache"
          fi
          
          # Add blocked coins file if created
          if [ -f config/blocked_coins.txt ]; then
            git add config/blocked_coins.txt
            echo "‚úÖ Added blocked coins file"
          fi
          
          # Commit changes
          git commit -m "Update market data cache [skip ci]" || echo "No changes to commit"
          git push || echo "Push failed"

      - name: Notify Only on Failure
        if: failure()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="‚ùå Market Data Refresh FAILED at $(date '+%H:%M:%S UTC')
          
          Please check GitHub Actions logs for details." \
            -d parse_mode="Markdown"

