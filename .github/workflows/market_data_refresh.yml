name: Market Data Refresh (Coin Filtering)

on:
  schedule:
    # Run every 6 hours to refresh coin universe
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  market_data_refresh:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Create Data Directories
        run: |
          mkdir -p cache
          mkdir -p src/data_refresh

      - name: Run Market Data Refresh
        env:
          # COINGECKO_API_KEY only needed for market data refresh
          COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: python src/data_refresh/market_data_refresh.py

      - name: Verify Cache Files
        run: |
          echo "=== Market Data Cache ==="
          if [ -f cache/high_risk_market_data.json ]; then
            echo "‚úÖ Market data cache exists"
            echo "Coins count: $(cat cache/high_risk_market_data.json | python -c "import sys, json; data=json.load(sys.stdin); print(len(data.get('coins', [])))")"
          else
            echo "‚ùå Market data cache missing"
          fi
          
          echo "=== Blocked Coins Cache ==="
          if [ -f cache/blocked_coins.json ]; then
            echo "‚úÖ Blocked coins cache exists"
            echo "Blocked count: $(cat cache/blocked_coins.json | python -c "import sys, json; data=json.load(sys.stdin); print(len(data.get('blocked_coins', [])))")"
          else
            echo "‚ùå Blocked coins cache missing"
          fi

      - name: Commit Market Data Cache
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          if [ -f cache/high_risk_market_data.json ]; then
            git add cache/high_risk_market_data.json
            echo "‚úÖ Added market data cache"
          fi
          
          if [ -f cache/blocked_coins.json ]; then
            git add cache/blocked_coins.json
            echo "‚úÖ Added blocked coins cache"
          fi
          
          git commit -m "Update market data and blocked coins cache [skip ci]" || echo "No changes to commit"
          git push || echo "Push failed"

      - name: Notify Success
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          COIN_COUNT=$(cat cache/high_risk_market_data.json | python -c "import sys, json; data=json.load(sys.stdin); print(len(data.get('coins', [])))" 2>/dev/null || echo "0")
          BLOCKED_COUNT=$(cat cache/blocked_coins.json | python -c "import sys, json; data=json.load(sys.stdin); print(len(data.get('blocked_coins', [])))" 2>/dev/null || echo "0")
          
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="‚úÖ Market Data Refresh Complete
          üìä Filtered coins: ${COIN_COUNT}
          üö´ Blocked coins: ${BLOCKED_COUNT}
          üïê Updated: $(date '+%H:%M:%S UTC')" \
            -d parse_mode="Markdown"

      - name: Notify Failure
        if: failure()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="‚ùå Market Data Refresh failed at $(date '+%H:%M:%S UTC')" \
            -d parse_mode="Markdown"
